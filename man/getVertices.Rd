% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getVertices.R
\name{getVertices}
\alias{getVertices}
\title{Get vertices from a graph}
\usage{
getVertices(
  g,
  n = 1,
  vs = V(g),
  mode = c("random", "targeted", "proba"),
  ct.ind.FUN = betweenness,
  ct.ind.w = 1,
  v.dist.ref = V(g),
  sp.dist.attr = "dist",
  sp.dist.w = 0,
  topo.dist.w = 0
)
}
\arguments{
\item{g}{igraph object.}

\item{n}{numeric; number of vertices to return (default: 1).}

\item{vs}{igraph.vs; sequence in which to choose the \code{n} vertices.
(default: all graph vertices).}

\item{mode}{character; method used to choose the \code{n} vertices , eitheer
'random', 'targeted' or 'proba'. Modes 'targeted' and 'proba' can use
several criterias such as centrality index with \code{ct.ind.FUN}.
(default: 'random').}

\item{ct.ind.FUN}{function used to compute centrality index of the vertices sequence.
Used only if ci.w > 0. Default is \code{\link{betweenness}} but can also be
\code{\link{degree}}.}

\item{ct.ind.w}{exponent weighting vertices centrality index in probabilities mix.
If negative, less central vertices are more likely to be chosen. Default is 1.}

\item{v.dist.ref}{igraph.vs of reference from which to compute \code{sp.dist}
and \code{topo.dist}.}

\item{sp.dist.attr}{Name of edge attribute containing spatial distance.}

\item{sp.dist.w}{Exponent weighting spatial distance in probabilities mix.}

\item{topo.dist.w}{Exponent weighting topological distance in probabilities mix.}
}
\value{
An igraph.vs vertex or vertices sequence.
}
\description{
# Vertices probababilites to be chosen can depend on 3 criterias:
k - Their centrality index: degree, betweenness, etc (preferential attachment)
t - Their topological distance from reference node(s)
s - Their spatial distance from reference node(s)
if all weigths are set to 0, its equals to random mode
}
\examples{
library(igraph)
set.seed(123)
g = erdos.renyi.game(100, 120, 'gnm')
## Get a random vertex
getVertices(g)
## Get vertex with highest betweenness
v = getVertices(g, mode="targ")
v==V(g)[which.max(betweenness(g))]
## Get vertex with highest degree
v = getVertices(g, mode="targeted", ct.ind.FUN=degree)
v==V(g)[which.max(degree(g))]
}
