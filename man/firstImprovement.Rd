% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/graph_optimization.R
\name{firstImprovement}
\alias{firstImprovement}
\title{Graph Rewiring First Improvement Optimization Algorithm}
\usage{
firstImprovement(
  g,
  rewiring.FUN = NULL,
  fun2min = NULL,
  niter = Inf,
  score.tolerance = 0.01,
  max.succ.reject = 100,
  verbose = TRUE,
  ...
)
}
\arguments{
\item{g}{an igraph object}

\item{rewiring.FUN}{function of rewiring to apply to the graph at each time step}

\item{fun2min}{function, metric to minimize}

\item{niter}{maximal number of iterations. Default is Infinite}

\item{score.tolerance}{a numeric threshold of fun2min under which graph is
accepted as result. Default is 0.01 (1\% of a normalized metric)}

\item{max.succ.reject}{maximal number of successive rejects of candidates,
beyond which we consider that the graph cannot be improved anymore, and is
returned. Default is 100}

\item{verbose}{Wether or not displaying fun2min evolution. Default is TRUE}

\item{...}{additionnal arguments passed to rewiring.FUN}
}
\value{
a list of 5 elements:
\describe{
  \item{g}{the optimized graph}
  \item{value}{the fun2min value obtained at the end of the process}
  \item{g_list}{list of igraphs object. History of successive improvements}
  \item{iter}{number of iterations elapsed}
  \item{acceptation_rate}{Acceptation rate during the process}
}
}
\description{
Minimize a given graph metric (function) by iterative rewiring process.
At each time step, a candidate is generated by rewiring
}
\examples{
library(igraph)
g = sample_pa(n=100, power=1, m=1,  directed=FALSE)
is_dag(g)
res = firstImprovement(g, rewiring.FUN=rewire, with=each_edge(prob=1),
fun2min=transitivity, niter=10)

}
